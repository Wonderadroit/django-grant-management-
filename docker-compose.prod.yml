# Docker Compose configuration for Django Grant Management System
# Production deployment with PostgreSQL, Redis, and Nginx

version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    restart: always
    environment:
      POSTGRES_DB: djf_grants_prod
      POSTGRES_USER: djf_user
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - djf_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U djf_user -d djf_grants_prod"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    restart: always
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - djf_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Django Application
  web:
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    environment:
      - DJANGO_SETTINGS_MODULE=core.settings_production
      - SECRET_KEY=${SECRET_KEY}
      - DB_NAME=djf_grants_prod
      - DB_USER=djf_user
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/1
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - DOMAIN_NAME=${DOMAIN_NAME}
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - ./logs:/var/log/djf
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - djf_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - ./docker/ssl:/etc/ssl/certs
      - ./logs/nginx:/var/log/nginx
    depends_on:
      web:
        condition: service_healthy
    networks:
      - djf_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backup Service (runs daily)
  backup:
    build:
      context: .
      dockerfile: Dockerfile
    restart: "no"
    environment:
      - DJANGO_SETTINGS_MODULE=core.settings_production
      - DB_NAME=djf_grants_prod
      - DB_USER=djf_user
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=db
      - DB_PORT=5432
    volumes:
      - ./backups:/var/backups/djf
      - media_volume:/app/media
      - ./logs:/var/log/djf
    depends_on:
      - db
    networks:
      - djf_network
    command: python manage.py backup --type=full
    profiles:
      - backup

  # Monitoring (optional)
  monitoring:
    image: prom/prometheus:latest
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - djf_network
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local
  prometheus_data:
    driver: local

networks:
  djf_network:
    driver: bridge